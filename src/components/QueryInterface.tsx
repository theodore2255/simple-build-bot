import { useState } from 'react';
import { Send, Bot, User, FileText, Clock } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Card } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { ScrollArea } from '@/components/ui/scroll-area';

interface QueryResult {
  id: string;
  query: string;
  response: string;
  sources: Array<{
    document: string;
    page: number;
    relevance: number;
  }>;
  timestamp: Date;
}

export const QueryInterface = () => {
  const [query, setQuery] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [results, setResults] = useState<QueryResult[]>([
    {
      id: '1',
      query: 'What is the main purpose of retrieval-augmented generation?',
      response: 'Retrieval-Augmented Generation (RAG) is a technique that combines the generative capabilities of large language models with external knowledge retrieval. The main purpose is to enhance the accuracy and relevance of AI responses by grounding them in specific, up-to-date information from a curated knowledge base rather than relying solely on the model\'s training data.',
      sources: [
        { document: 'rag-introduction.pdf', page: 1, relevance: 0.95 },
        { document: 'llm-techniques.pdf', page: 3, relevance: 0.87 },
      ],
      timestamp: new Date(Date.now() - 1000 * 60 * 5), // 5 minutes ago
    },
  ]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!query.trim()) return;

    setIsLoading(true);
    
    // Simulate query processing
    const newResult: QueryResult = {
      id: Math.random().toString(36).substring(7),
      query,
      response: 'This is a simulated response that would be generated by the RAG pipeline. In a real implementation, this would involve retrieving relevant document chunks, passing them to an LLM API, and generating a contextually accurate response based on your uploaded documents.',
      sources: [
        { document: 'document-1.pdf', page: Math.floor(Math.random() * 10) + 1, relevance: 0.89 },
        { document: 'document-2.pdf', page: Math.floor(Math.random() * 10) + 1, relevance: 0.76 },
      ],
      timestamp: new Date(),
    };

    setTimeout(() => {
      setResults(prev => [newResult, ...prev]);
      setQuery('');
      setIsLoading(false);
    }, 2000);
  };

  const formatTime = (date: Date) => {
    return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
  };

  return (
    <div className="space-y-6">
      <Card className="p-6">
        <h3 className="text-lg font-semibold mb-4">Query Your Documents</h3>
        <form onSubmit={handleSubmit} className="flex gap-3">
          <Input
            value={query}
            onChange={(e) => setQuery(e.target.value)}
            placeholder="Ask a question about your uploaded documents..."
            className="flex-1"
            disabled={isLoading}
          />
          <Button 
            type="submit" 
            disabled={isLoading || !query.trim()}
            variant="ai"
            size="lg"
          >
            {isLoading ? (
              <div className="w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin" />
            ) : (
              <Send className="w-4 h-4" />
            )}
          </Button>
        </form>
      </Card>

      <div className="space-y-4">
        <h3 className="text-lg font-semibold">Query Results</h3>
        <ScrollArea className="h-[600px]">
          <div className="space-y-6">
            {results.map((result) => (
              <Card key={result.id} className="p-6">
                <div className="space-y-4">
                  {/* User Query */}
                  <div className="flex gap-3">
                    <div className="w-8 h-8 rounded-full bg-secondary flex items-center justify-center flex-shrink-0">
                      <User className="w-4 h-4" />
                    </div>
                    <div className="flex-1">
                      <p className="font-medium">{result.query}</p>
                      <div className="flex items-center gap-2 mt-1 text-sm text-muted-foreground">
                        <Clock className="w-3 h-3" />
                        {formatTime(result.timestamp)}
                      </div>
                    </div>
                  </div>

                  {/* AI Response */}
                  <div className="flex gap-3">
                    <div className="w-8 h-8 rounded-full bg-gradient-primary flex items-center justify-center flex-shrink-0">
                      <Bot className="w-4 h-4 text-white" />
                    </div>
                    <div className="flex-1">
                      <p className="leading-relaxed">{result.response}</p>
                      
                      {/* Sources */}
                      <div className="mt-4">
                        <p className="text-sm font-medium mb-2 flex items-center gap-2">
                          <FileText className="w-4 h-4" />
                          Sources
                        </p>
                        <div className="flex flex-wrap gap-2">
                          {result.sources.map((source, index) => (
                            <Badge
                              key={index}
                              variant="secondary"
                              className="text-xs"
                            >
                              {source.document} (p.{source.page}) â€¢ {Math.round(source.relevance * 100)}%
                            </Badge>
                          ))}
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </Card>
            ))}
          </div>
        </ScrollArea>
      </div>
    </div>
  );
};